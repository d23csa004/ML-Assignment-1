# -*- coding: utf-8 -*-
"""Ujjwal_assimentML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-f6xa_eJS1Hra7_OobXEVAddzb0CaSSp
"""

pip install kaggle

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

# Set plot style for aesthetics
sns.set(style='whitegrid')

# Load the dataset
df = pd.read_csv('/content/Spotify Most Streamed Songs.csv')

# Display the first few rows of the dataset to understand its structure
df.head()

"""1. Numerical Variables"""

# Summary statistics for numerical variables
df.describe()

# Plot the distribution of artist_count and in_spotify_charts
plt.figure(figsize=(10,5))

# artist_count distribution
plt.subplot(1, 2, 1)
sns.histplot(df['artist_count'].dropna(), kde=True, color='blue', bins=30)
plt.title('artist_count Distribution')

# in_spotify_charts distribution
plt.subplot(1, 2, 2)
sns.histplot(df['in_spotify_charts'].dropna(), kde=True, color='green', bins=30)
plt.title('in_spotify_charts Distribution')

plt.show()

# Calculate skewness and kurtosis for artist_count and in_spotify_charts
artist_count_skewness = df['artist_count'].skew()
artist_count_kurtosis = df['artist_count'].kurt()
in_spotify_charts_skewness = df['in_spotify_charts'].skew()
in_spotify_charts_kurtosis = df['in_spotify_charts'].kurt()

print(f"artist_count Skewness: {artist_count_skewness}, artist_count Kurtosis: {artist_count_kurtosis}")
print(f"in_spotify_charts Skewness: {in_spotify_charts_skewness}, in_spotify_charts Kurtosis: {in_spotify_charts_kurtosis}")

"""2. Categorical Variables"""

# Count plot for categorical variables
plt.figure(figsize=(15,5))

# artist_count count
plt.subplot(1, 3, 1)
sns.countplot(x='artist_count', data=df, palette='Set1')
plt.title('artist_count Count')

# key count
plt.subplot(1, 3, 2)
sns.countplot(x='key', data=df, palette='Set2')
plt.title('key Count')

# mode count
plt.subplot(1, 3, 3)
sns.countplot(x='mode', data=df, palette='Set3')
plt.title('mode Count')

plt.tight_layout()
plt.show()

# Mode for categorical variables
print("Mode of categorical variables:")
print(df[['artist_count', 'key', 'mode']].mode())

# Select only numerical columns for correlation matrix
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Correlation matrix to observe relationships between numerical variables
corr_matrix = df[numerical_columns].corr()

# Plot the heatmap for correlation matrix
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Matrix')
plt.show()

# Boxplot of key vs mode
plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
sns.boxplot(x='mode', y='key', data=df)
plt.title('mode vs key')

# Boxplot of released_year vs mode
plt.subplot(1, 2, 2)
sns.boxplot(x='mode', y='released_year', data=df)
plt.title('mode vs released_year')

plt.tight_layout()
plt.show()

# Cross-tabulation between released_year and released_day
survived_sex = pd.crosstab(df['released_year'], df['released_day'])
print(survived_sex)

# Cross-tabulation between released_year and streams
survived_pclass = pd.crosstab(df['released_year'], df['streams'])
print(survived_pclass)

# Visualize cross-tabulations
plt.figure(figsize=(12, 5))

# released_year by released_day
plt.subplot(1, 2, 1)
survived_sex.plot(kind='bar', stacked=True, ax=plt.gca())
plt.title('released_year by released_day')

# released_year by streams
plt.subplot(1, 2, 2)
survived_pclass.plot(kind='bar', stacked=True, ax=plt.gca())
plt.title('released_year by streams')

plt.tight_layout()
plt.show()